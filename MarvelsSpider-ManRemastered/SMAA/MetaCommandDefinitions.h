#pragma once

#pragma pack(push, 4)

using META_COMMAND_BOOL = UINT64;

enum META_COMMAND_TENSOR_DATA_TYPE : UINT64
{
    META_COMMAND_TENSOR_DATA_TYPE_FLOAT32,
    META_COMMAND_TENSOR_DATA_TYPE_FLOAT16,
    META_COMMAND_TENSOR_DATA_TYPE_UINT32,

    META_COMMAND_TENSOR_DATA_TYPE_COUNT,
};

enum META_COMMAND_TENSOR_LAYOUT : UINT64
{
    META_COMMAND_TENSOR_LAYOUT_UNKNOWN,
    META_COMMAND_TENSOR_LAYOUT_STANDARD,

    META_COMMAND_TENSOR_LAYOUT_COUNT,
};

enum META_COMMAND_TENSOR_FLAGS : UINT64
{
    META_COMMAND_TENSOR_FLAG_NONE = 0,
    META_COMMAND_TENSOR_FLAG_DATA_STATIC = 0x1, // deprecated in 19H1
    META_COMMAND_TENSOR_FLAG_DATA_MANAGED = 0x2, // added in 19H1
};

enum META_COMMAND_PRECISION : UINT64
{
    META_COMMAND_PRECISION_FLOAT32,
    META_COMMAND_PRECISION_FLOAT16,

    META_COMMAND_PRECISION_COUNT,
};

struct META_COMMAND_TENSOR_DESC
{
    META_COMMAND_TENSOR_DATA_TYPE DataType;
    META_COMMAND_TENSOR_LAYOUT Layout;
    META_COMMAND_TENSOR_FLAGS Flags;
    UINT64 DimensionCount; // Up to 5
    UINT64 Size[5];
    UINT64 Stride[5];
};

struct META_COMMAND_OPTIONAL_TENSOR_DESC : META_COMMAND_TENSOR_DESC
{
    META_COMMAND_BOOL IsNull;
};

enum META_COMMAND_MATRIX_TRANSFORM : UINT64
{
    META_COMMAND_MATRIX_TRANSFORM_NONE,
    META_COMMAND_MATRIX_TRANSFORM_TRANSPOSE,

    META_COMMAND_MATRIX_TRANSFORM_COUNT,
};

enum META_COMMAND_ACTIVATION_FUNCTION : UINT64
{
    META_COMMAND_ACTIVATION_FUNCTION_ELU,
    META_COMMAND_ACTIVATION_FUNCTION_HARDMAX,
    META_COMMAND_ACTIVATION_FUNCTION_HARD_SIGMOID,
    META_COMMAND_ACTIVATION_FUNCTION_IDENTITY,
    META_COMMAND_ACTIVATION_FUNCTION_LEAKY_RELU,
    META_COMMAND_ACTIVATION_FUNCTION_LINEAR,
    META_COMMAND_ACTIVATION_FUNCTION_LOG_SOFTMAX,
    META_COMMAND_ACTIVATION_FUNCTION_PARAMETERIZED_RELU,
    META_COMMAND_ACTIVATION_FUNCTION_PARAMETRIC_SOFTPLUS,
    META_COMMAND_ACTIVATION_FUNCTION_RELU,
    META_COMMAND_ACTIVATION_FUNCTION_SCALED_ELU,
    META_COMMAND_ACTIVATION_FUNCTION_SCALED_TANH,
    META_COMMAND_ACTIVATION_FUNCTION_SIGMOID,
    META_COMMAND_ACTIVATION_FUNCTION_SOFTMAX,
    META_COMMAND_ACTIVATION_FUNCTION_SOFTPLUS,
    META_COMMAND_ACTIVATION_FUNCTION_SOFTSIGN,
    META_COMMAND_ACTIVATION_FUNCTION_TANH,
    META_COMMAND_ACTIVATION_FUNCTION_THRESHOLDED_RELU,

    META_COMMAND_ACTIVATION_FUNCTION_COUNT,
};

#define META_COMMAND_ACTIVATION_MAX_PARAMS 2

struct META_COMMAND_ACTIVATION_DESC
{
    META_COMMAND_ACTIVATION_FUNCTION Function;
    float Params[META_COMMAND_ACTIVATION_MAX_PARAMS];
};

struct META_COMMAND_OPTIONAL_ACTIVATION_DESC : META_COMMAND_ACTIVATION_DESC
{
    META_COMMAND_BOOL IsNull;
};

enum META_COMMAND_CONVOLUTION_DIRECTION : UINT64
{
    META_COMMAND_CONVOLUTION_DIRECTION_FORWARD, // Corresponds to regular Convolution
    META_COMMAND_CONVOLUTION_DIRECTION_BACKWARD, // Corresponds to ConvolutionTranspose

    META_COMMAND_CONVOLUTION_DIRECTION_COUNT,
};

enum META_COMMAND_CONVOLUTION_MODE : UINT64
{
    META_COMMAND_CONVOLUTION_MODE_CONVOLUTION,
    META_COMMAND_CONVOLUTION_MODE_CROSS_CORRELATION,

    META_COMMAND_CONVOLUTION_MODE_COUNT,
};

enum META_COMMAND_CONVOLUTION_PRECISION : UINT64
{
    META_COMMAND_CONVOLUTION_PRECISION_FLOAT32,
    META_COMMAND_CONVOLUTION_PRECISION_FLOAT16,
    META_COMMAND_CONVOLUTION_PRECISION_MUL_FLOAT16_ADD_FLOAT32,

    META_COMMAND_CONVOLUTION_PRECISION_COUNT,
};

enum META_COMMAND_RECURRENT_NETWORK_DIRECTION : UINT64
{
    META_COMMAND_RECURRENT_NETWORK_DIRECTION_FORWARD,
    META_COMMAND_RECURRENT_NETWORK_DIRECTION_BACKWARD,
    META_COMMAND_RECURRENT_NETWORK_DIRECTION_BIDIRECTIONAL,

    META_COMMAND_RECURRENT_NETWORK_DIRECTION_COUNT,
};

enum META_COMMAND_POOLING_FUNCTION : UINT64
{
    META_COMMAND_POOLING_FUNCTION_AVERAGE,
    META_COMMAND_POOLING_FUNCTION_L2,
    META_COMMAND_POOLING_FUNCTION_MAX,

    META_COMMAND_POOLING_FUNCTION_COUNT,
};

enum META_COMMAND_REDUCE_FUNCTION : UINT64
{
    META_COMMAND_REDUCE_FUNCTION_ARGMAX,
    META_COMMAND_REDUCE_FUNCTION_ARGMIN,
    META_COMMAND_REDUCE_FUNCTION_AVERAGE,
    META_COMMAND_REDUCE_FUNCTION_L1,
    META_COMMAND_REDUCE_FUNCTION_L2,
    META_COMMAND_REDUCE_FUNCTION_LOG_SUM,
    META_COMMAND_REDUCE_FUNCTION_LOG_SUM_EXP,
    META_COMMAND_REDUCE_FUNCTION_MAX,
    META_COMMAND_REDUCE_FUNCTION_MIN,
    META_COMMAND_REDUCE_FUNCTION_MULTIPLY,
    META_COMMAND_REDUCE_FUNCTION_SUM,
    META_COMMAND_REDUCE_FUNCTION_SUM_SQUARE,

    META_COMMAND_REDUCE_FUNCTION_COUNT,
};

enum META_COMMAND_NORMALIZATION_TYPE : UINT64
{
    META_COMMAND_NORMALIZATION_TYPE_BATCH,

    META_COMMAND_NORMALIZATION_TYPE_COUNT,
};

enum META_COMMAND_BIND_FLAGS : UINT64
{
    META_COMMAND_BIND_FLAG_NONE = 0,
    META_COMMAND_BIND_FLAG_DESCRIPTORS_VOLATILE = (1 << 0),
};

// -------------------------------------------------------------------------------------------------------------------
// Convolution
//

// Create a convolution operation
//      descIn              Descriptor of the input tensor
//      descFilter          Descriptor of the tensor acting as the filter kernel
//      descBias            Descriptor of the optional bias tensor used along with the weight tensor
//      descOut             Descriptor of the output tensor
//      mode                Convolution mode as defined in DML_CONVOLUTION_MODE
//      direction           Convolution direction as defined in DML_CONVOLUTION_DIRECTION
//      strides             Strides for the filter kernel position
//      dilations           The distance per dimension between elements that are multiplied
//                          by adjacent filter weights.
//      startPadding        Padding at the start of each dimension in the input (or the
//                          original input, in the case of backward convolution).
//      endPadding          Padding at the end of each dimension in the input (or the
//                          original input, in the case of backward convolution).
//      outputPadding       Padding at the end of each dimension in the output which should be zeroed.
//      dimensionCount      Number of dimensions to which convolution occurs
//      groupCount          Number of channel groups convolved independently
//
// The layout of input and output tensors is NCHW.  The layout of the filter tensor is KCHW.

// {8D5FAE79-108F-42D7-A90A-08DB67C812B0}
static constexpr GUID MetaCommand_Convolution = { 0x8d5fae79, 0x108f, 0x42d7, { 0xa9, 0xa, 0x8, 0xdb, 0x67, 0xc8, 0x12, 0xb0 } };

struct META_COMMAND_CREATE_CONVOLUTION_DESC
{
    META_COMMAND_TENSOR_DESC DescIn;
    META_COMMAND_TENSOR_DESC DescFilter;
    META_COMMAND_OPTIONAL_TENSOR_DESC DescBias;
    META_COMMAND_TENSOR_DESC DescOut;
    META_COMMAND_CONVOLUTION_MODE Mode;
    META_COMMAND_CONVOLUTION_DIRECTION Direction;
    META_COMMAND_CONVOLUTION_PRECISION Precision;

    UINT64 Stride[3];
    UINT64 Dilation[3];
    UINT64 StartPadding[3];
    UINT64 EndPadding[3];
    UINT64 DimensionCount; // 2 or 3

    UINT64 OutputPadding[5]; // Dimension must match that of DescOut
    UINT64 GroupCount;

    META_COMMAND_OPTIONAL_ACTIVATION_DESC Activation;
    META_COMMAND_BIND_FLAGS BindFlags;
};

struct META_COMMAND_INITIALIZE_CONVOLUTION_DESC
{
    D3D12_GPU_DESCRIPTOR_HANDLE PersistentResource;
};

struct META_COMMAND_EXECUTE_CONVOLUTION_DESC
{
    D3D12_GPU_DESCRIPTOR_HANDLE InputResource;
    D3D12_GPU_DESCRIPTOR_HANDLE FilterResource;
    D3D12_GPU_DESCRIPTOR_HANDLE BiasResource;
    D3D12_GPU_DESCRIPTOR_HANDLE OutputResource;

    D3D12_GPU_DESCRIPTOR_HANDLE PersistentResource;
    D3D12_GPU_DESCRIPTOR_HANDLE TemporaryResource;
};

//static_assert(sizeof(META_COMMAND_CREATE_CONVOLUTION_DESC) == 664);
//static_assert(sizeof(META_COMMAND_INITIALIZE_CONVOLUTION_DESC) == 8);
//static_assert(sizeof(META_COMMAND_EXECUTE_CONVOLUTION_DESC) == 48);

// -------------------------------------------------------------------------------------------------------------------
// CopyTensor
//

// Utility for converting between UNKNOWN (hardware native) and STANDARD (NCHW/KCHW) layout.

// {1EB9B8FE-2E36-4A13-A299-15A1385739B5}
static constexpr GUID MetaCommand_CopyTensor = { 0x1eb9b8fe, 0x2e36, 0x4a13, { 0xa2, 0x99, 0x15, 0xa1, 0x38, 0x57, 0x39, 0xb5 } };

struct META_COMMAND_CREATE_COPY_TENSOR_DESC
{
    META_COMMAND_TENSOR_LAYOUT DstLayout;
    META_COMMAND_TENSOR_LAYOUT SrcLayout;
    META_COMMAND_BIND_FLAGS BindFlags;
};

struct META_COMMAND_INITIALIZE_COPY_TENSOR_DESC
{
    UINT64 Unused; // Unused; for padding only
};

struct META_COMMAND_EXECUTE_COPY_TENSOR_DESC
{
    META_COMMAND_TENSOR_DESC DstDesc;
    D3D12_GPU_DESCRIPTOR_HANDLE DstResource;

    META_COMMAND_TENSOR_DESC SrcDesc;
    D3D12_GPU_DESCRIPTOR_HANDLE SrcResource;

    D3D12_GPU_DESCRIPTOR_HANDLE TemporaryResource;
};

//static_assert(sizeof(META_COMMAND_CREATE_COPY_TENSOR_DESC) == 24);
//static_assert(sizeof(META_COMMAND_INITIALIZE_COPY_TENSOR_DESC) == 8);
//static_assert(sizeof(META_COMMAND_EXECUTE_COPY_TENSOR_DESC) == 248);

#pragma pack(pop)